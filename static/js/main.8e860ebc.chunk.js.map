{"version":3,"sources":["logo.svg","components/GradeForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grade","props","subject","grade","weight","GradeList","listItems","grades","map","GradeResult","message","sum_grade","reduce","acc","result","total_weight","weight_left","target","toPrecision","GradeForm","state","onChange","bind","onSubmit","e","value","name","this","setState","concat","preventDefault","Number","type","placeholder","min","max","step","React","Component","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8e860ebc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Grade = (props) => {\n  return(\n      <p><strong>{props.subject}</strong> | Grade: {props.grade} | Weight: {props.weight}</p>\n  )\n}\n\nconst GradeList = (props) => {\n  const listItems = props.grades.map(({subject,grade,weight}) => \n    <Grade \n      subject={subject} \n      grade={grade}\n      weight={weight}\n    />\n  );\n  return(\n    <div>{listItems}</div>\n  )\n}\n\nconst GradeResult = (props) => {\n  const sum_grade = props.grades.reduce((acc,grade)=>acc+grade.grade*grade.weight,0);\n  const result =  sum_grade/props.total_weight;\n  const weight_left = 100-props.total_weight;\n\n  const target = (props.target - sum_grade/100)/weight_left *100\n  let message;\n  if(target > 100){\n    message = <h3>You cannot achieve {props.target +'%'} :(</h3>\n  }else if(target>0){\n    message = <h3>To get {props.target + '%'}, you need {target.toPrecision(4) + '%'} overall with {weight_left.toPrecision(4)+'%'} weighting</h3>\n  }else{\n    message = <h3>You have already reached {props.target + '%'}!, Well done!</h3>\n  }\n  return (\n    <div>\n      <h2>Current average: {result}</h2>\n      {message}\n    </div>\n    \n  )\n}\n\nclass GradeForm extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      subject : '',\n      grade : '',\n      weight: '',\n      grades: props.grades,\n      target: 60};\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  onChange(e) {\n    const value = e.target.value;\n    const name = e.target.name;\n    this.setState({\n      [name]:value\n    });\n  }\n\n  onSubmit(e) {\n    const grades = this.state.grades;\n    this.setState({\n      grades : [{\n        subject : this.state.subject,\n        grade : this.state.grade,\n        weight :  this.state.weight\n      }].concat(grades),\n      subject : '',\n      grade : '',\n      weight: ''\n    })\n    e.preventDefault();\n  }\n\n  render() {\n    const total_weight = this.state.grades.reduce((acc,grade)=>acc+Number(grade.weight),0);\n    const weight_left = 100-total_weight;\n\n    return (\n      <div>\n      <form onSubmit={this.onSubmit}>\n        <label>\n          Subject:\n          <input \n            name=\"subject\" \n            type=\"text\" \n            placeholder=\"CompSci\" \n            value={this.state.subject} \n            onChange={this.onChange} \n          />\n        </label>\n        <label>\n          Grade:\n          <input \n            name=\"grade\" \n            type=\"number\" \n            placeholder={70} \n            value={this.state.grade} \n            onChange={this.onChange} \n            min=\"0\" \n            max=\"100\"\n          />\n        </label>\n        <label>\n          Weight:\n          <input \n            name=\"weight\" \n            type=\"number\" \n            placeholder={30} \n            value={this.state.weight} \n            onChange={this.onChange} \n            min=\"0\" \n            max={weight_left} \n            step=\"any\"\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <label>\n        Target\n        <input \n          name=\"target\"\n          type=\"range\"\n          placeholder=\"70\"\n          value={this.state.target}\n          min=\"0\" \n          max=\"100\"\n          step=\"1\"\n          onChange={this.onChange}\n        />\n        <input \n          name=\"target\"\n          type=\"number\"\n          placeholder=\"70\"\n          value={this.state.target}\n          min=\"0\" \n          max=\"100\"\n          step=\"1\"\n          onChange={this.onChange}\n        />\n      </label>\n      <GradeList grades={this.state.grades} />\n      \n      <GradeResult grades={this.state.grades} total_weight={total_weight} target={this.state.target}/>\n      \n      </div>\n    );\n  }\n}\n\nexport default GradeForm;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GradeForm from './components/GradeForm';\n\n\n\nfunction App() {\n  //const grades = [{subject: \"First Year\", grade : 80, weight:0},\n  //            {subject: \"Second Year\", grade :40, weight:33}]\n  const grades = []\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n        <GradeForm grades={grades} />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}