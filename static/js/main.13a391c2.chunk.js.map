{"version":3,"sources":["logo.svg","components/GradeForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Field","styled","input","Label","label","Grade","props","id","grade","weight","type","onClick","name","value","min","max","step","onChange","GradeList","listItems","grades","map","i","key","e","onGradeChange","GradeResult","message","sum_grade","reduce","acc","result","total_weight","weight_left","target","toPrecision","GradeForm","state","bind","onSubmit","prop","this","slice","setState","splice","concat","preventDefault","Number","placeholder","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.13a391c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport styled from \"styled-components\";\n\nconst Field = styled.input`\n  height: 24px;\n  margin : 16px 24px 16px 8px;\n  width: 4rem;\n`\nconst Label = styled.label`\n  margin : 8px;\n`\n\nconst Grade = (props) => {\n  return(\n    <div>\n    <p>{props.id} Grade: {props.grade}% | Weight: {props.weight}% <button type=\"button\" onClick={props.onClick}>X</button></p>\n    <input \n          name=\"grade\"\n          type=\"range\"\n          value={props.grade}\n          min=\"0\" \n          max=\"100\"\n          step=\"1\"\n          onChange={props.onChange}\n        />\n    </div>\n    \n  )\n}\n\n\n\nconst GradeList = (props) => {\n  const listItems = props.grades.map(({grade,weight},i) => \n    <Grade \n      grade={grade}\n      weight={weight}\n      onClick={() => props.onClick(i)}\n      key={i}\n      onChange={(e)=>props.onGradeChange(e,i)}\n    />\n  );\n  return(\n    <div>{listItems}</div>\n  )\n}\n\nconst GradeResult = (props) => {\n  const sum_grade = props.grades.reduce((acc,grade)=>acc+grade.grade*grade.weight,0);\n  const result =  sum_grade/props.total_weight;\n  const weight_left = 100-props.total_weight;\n  const target = (props.target - sum_grade/100)/weight_left *100\n\n  let message;\n  if(target > 100){\n    message = <h4>You cannot achieve {props.target +'%'} :(</h4>\n  }else if(target>0){\n    message = <h4>To get {props.target + '%'}, you need {target.toPrecision(4) + '%'} overall with {weight_left.toPrecision(4)+'%'} weighting</h4>\n  }else{\n    message = <h4>You have already reached {props.target + '%'}!, Well done!</h4>\n  }\n  return (\n    <div>\n      <h2>Current average: {result.toPrecision(4)}</h2>\n      <h3>Min:{(sum_grade/100).toPrecision(4)} | Max:{(weight_left + sum_grade/100).toPrecision(4) }</h3>\n      {message}\n    </div>\n    \n  )\n}\n\nclass GradeForm extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      grade : '',\n      weight: '',\n      grades: props.grades,\n      target: 60};\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onGradeChange = this.onGradeChange.bind(this);\n  }\n\n  onGradeChange(e,i){\n    const value = e.target.value;\n    const prop = e.target.name;\n    const grades = this.state.grades.slice();\n    grades[i][prop] = value;\n    this.setState({\n      grades:grades\n    })\n  }\n\n  onChange(e) {\n    const value = e.target.value;\n    const name = e.target.name;\n    this.setState({\n      [name]:value\n    });\n  }\n\n  onClick(i){\n    const grades = this.state.grades\n    grades.splice(i,1);\n    this.setState({\n      grades:grades\n    })\n  }\n\n  onSubmit(e) {\n    const grades = this.state.grades;\n    if(this.state.grade !=='' && this.state.weight !==''){\n      this.setState({\n      grades : [{\n        grade : this.state.grade,\n        weight :  this.state.weight\n      }].concat(grades),\n      grade : '',\n      weight: ''\n      })\n    }\n    e.preventDefault();\n  }\n\n  render() {\n    const total_weight = this.state.grades.reduce((acc,grade)=>acc+Number(grade.weight),0);\n    const weight_left = 100-total_weight;\n\n    return (\n      <div>\n        <GradeResult grades={this.state.grades} total_weight={total_weight} target={this.state.target}/>\n        <Label>\n        Target\n        <input \n          name=\"target\"\n          type=\"range\"\n          placeholder=\"70\"\n          value={this.state.target}\n          min=\"0\" \n          max=\"100\"\n          step=\"1\"\n          onChange={this.onChange}\n        />\n        <Field \n          name=\"target\"\n          type=\"number\"\n          placeholder=\"70\"\n          value={this.state.target}\n          min=\"0\" \n          max=\"100\"\n          step=\"1\"\n          onChange={this.onChange}\n        />\n      </Label>\n      <form onSubmit={this.onSubmit}>\n        <Label>\n          Grade:\n          <Field \n            name=\"grade\" \n            type=\"number\" \n            placeholder={70} \n            value={this.state.grade} \n            onChange={this.onChange} \n            min=\"0\" \n            max=\"100\"\n            step=\"any\"\n          />\n        </Label>\n        <Label>\n          Weight:\n          <Field \n            name=\"weight\" \n            type=\"number\" \n            placeholder={30} \n            value={this.state.weight} \n            onChange={this.onChange} \n            min=\"0\" \n            max={weight_left} \n            step=\"any\"\n          />\n        </Label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      \n      <GradeList grades={this.state.grades} onClick={this.onClick} onGradeChange={this.onGradeChange}/>\n      \n      </div>\n    );\n  }\n}\n\nexport default GradeForm;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GradeForm from './components/GradeForm';\n\n\n\nfunction App() {\n  //const grades = [{subject: \"First Year\", grade : 80, weight:0},\n  //            {subject: \"Second Year\", grade :40, weight:33}]\n  const grades = []\n  return (\n    <div className=\"App\">\n        <GradeForm grades={grades} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}